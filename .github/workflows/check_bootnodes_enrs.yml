name: Check Bootnodes ENRs

on:
  pull_request:
    branches:
      - main

jobs:
  check_enrs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install yq
        uses: mikefarah/yq@master

      - name: Install protobuf-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install enr-cli
        run: cargo install enr-cli

      - name: Check bootnodes ENRs for padding
        run: |
          files_with_padding=""
          for FILE in $(find . -type f \( -name 'bootnodes.yaml' -o -name 'bootstrap_nodes.txt' \)); do
            echo "Checking paddings in file: $FILE"
            while read -r LINE; do
              if [[ "$LINE" =~ enr: ]]; then
                BASE64_STRING=${LINE#enr:}
                if [[ "$BASE64_STRING" =~ = ]]; then
                  if [[ "$files_with_padding" != *"$FILE"* ]]; then
                    echo "Error: ENR in $FILE contains padding: $LINE"
                    files_with_padding="$files_with_padding $FILE"
                  fi
                fi
              fi
            done < "$FILE"
          done
          if [ -n "$files_with_padding" ]; then
            echo "Error: Bootnodes ENR strings contain padding in the following files:"
            echo "$files_with_padding"
            exit 1
          fi

      - name: Check ENR Strings with enr-cli
        run: |
          for FILE in $(find . -type f \( -name 'bootnodes.yaml' -o -name 'bootstrap_nodes.txt' \)); do
            echo "Processing file: $FILE"
            if [[ "$FILE" == *".yaml" ]]; then
              LINES=$(yq eval '.[] | select(test("enr:"))' "$FILE")
            elif [[ "$FILE" == *".txt" ]]; then
              LINES=$(grep -E '^[[:space:]]*enr:.*' "$FILE" | grep -v -E '^[[:space:]]*(#|$)')
            else
              echo "Unsupported file type: $FILE"
              exit 1
            fi

            while IFS= read -r LINE; do
              if [[ -n "$LINE" && "$LINE" =~ enr: ]]; then
                echo "Processing line: $LINE"
                enr-cli read "$LINE" 1>/dev/null
                if [ $? -ne 0 ]; then
                  echo "Error: enr-cli read failed for line: $LINE in file: $FILE"
                  exit 1
                fi
              fi
            done <<< "$LINES"
          done
